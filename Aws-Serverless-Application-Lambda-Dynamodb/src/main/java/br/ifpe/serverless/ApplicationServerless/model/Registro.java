package br.ifpe.serverless.ApplicationServerless.model;



import java.util.Random;

import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.google.gson.Gson;

@DynamoDBTable(tableName="Registro")
public class Registro {
	
	
	private String id ;
    private String medico;
    private int CRM;
    private String hospital ;
    private String CNPJ ;
    private String paciente ;
    private String convenio ;
    private  String acomodacao ;
    private String procedimento ;
    private String payload;
    
    
    public Registro(){
    
    }
    
    public Registro(String id,String medico,int CRM,String hospital,String CNPJ,String convenio , String paciente,String acomodacao,String procedimento ){
    	this.id = id;
    	this.medico = medico;
    	this.CRM =CRM;
    	this.hospital = hospital;
    	this.CNPJ = CNPJ;
    	this.paciente = paciente;
    	this.convenio = convenio;
    	this.acomodacao = acomodacao;
    	this.procedimento = procedimento;
    
    }
    public Registro(String json) {
    	Gson gson = new Gson();
    	Registro registro = gson.fromJson(json, Registro.class);
    	this.id = registro.id;
    	this.medico = registro.medico;
    	this.CRM = registro.CRM;
    	this.hospital = registro.hospital;
    	this.CNPJ = registro.CNPJ;
    	this.paciente = registro.paciente;
    	this.convenio = registro.convenio;
    	this.acomodacao = registro.acomodacao;
    	this.procedimento = registro.procedimento;
    	
    	
    }
    
    public String toString() {
    	return new Gson().toJson(this);
    }
    
    
    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
    
	public String getMedico() {
		return medico;
	}
	public void setMedico(String medico) {
		this.medico = medico;
	}
	public int getCRM() {
		return CRM;
	}
	public void setCRM(int cRM) {
		CRM = cRM;
	}
	public String getHospital() {
		return hospital;
	}
	public void setHospital(String hospital) {
		this.hospital = hospital;
	}
	public String getCNPJ() {
		return CNPJ;
	}
	public void setCNPJ(String cNPJ) {
		CNPJ = cNPJ;
	}
	public String getPaciente() {
		return paciente;
	}
	public void setPaciente(String paciente) {
		this.paciente = paciente;
	}
	public String getConvenio() {
		return convenio;
	}
	public void setConvenio(String convenio) {
		this.convenio = convenio;
	}
	public String getAcomodacao() {
		return acomodacao;
	}
	public void setAcomodacao(String acomodacao) {
		this.acomodacao = acomodacao;
	}
	public String getProcedimento() {
		return procedimento;
	}
	public void setProcedimento(String procedimento) {
		this.procedimento = procedimento;
	}
	
	@DynamoDBAttribute(attributeName="payload")
    public String getPayload() {
    	return this.payload; 
    }
    public void setPayload(String payload) {
    	this.payload = payload; 
    }
    public static void saveItem() {
        Registro obj = new Registro();
        obj.setPayload("abc123");

        AmazonDynamoDB amazonDynamoDB = AmazonDynamoDBClientBuilder.standard()
	            .withRegion(Regions.US_EAST_1)
	            .build();
		// id field is null at this point
        DynamoDBMapper mapper = new DynamoDBMapper(amazonDynamoDB);
        mapper.save(obj);

        System.out.println("Object was saved with id " + obj.getId());
    }

	
    
    public static String radom() {
		 	Random gerador = new Random();
	        
	        
	        String registro = ("serverless2023"+gerador.nextInt());
	        
	        System.out.println(registro);
	        
	        return registro;
	    }
}
